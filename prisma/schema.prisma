generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  clerkId     String       @id @unique
  email       String       @unique
  firstName   String
  lastName    String
  createdAt   DateTime     @default(now())
  role        UserRole     @default(USER)
  comments    Comment[]
  feedback    Feedback[]
  likes       Like[]
  notes       Note[]
  notices     Notice[]
  UserProfile UserProfile?
}

model Year {
  id        String     @id @default(cuid())
  number    Int        @unique
  semesters Semester[]
}

model Semester {
  id       String    @id @default(cuid())
  number   Int
  yearId   String
  year     Year      @relation(fields: [yearId], references: [id])
  subjects Subject[]

  @@unique([number, yearId])
}

model Subject {
  id         String   @id @default(cuid())
  name       String
  code       String
  semesterId String
  notes      Note[]
  semester   Semester @relation(fields: [semesterId], references: [id])

  @@unique([code, semesterId])
}

model Note {
  id            String    @id @default(cuid())
  title         String
  content       String
  type          NoteType
  fileUrl       String
  downloadCount Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  authorClerkId String
  subjectId     String
  driveFileId   String?
  isPublic      Boolean   @default(false)
  isRejected    Boolean   @default(false)
  rejectedAt    DateTime?
  tags          String[]  @default([])
  comments      Comment[]
  likes         Like[]
  author        User      @relation(fields: [authorClerkId], references: [clerkId])
  subject       Subject   @relation(fields: [subjectId], references: [id])
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  noteId    String?
  createdAt DateTime @default(now())
  noticeId  String?
  note      Note?    @relation(fields: [noteId], references: [id])
  notice    Notice?  @relation(fields: [noticeId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [clerkId])

  @@unique([userId, noteId])
  @@unique([userId, noticeId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  userId    String
  noteId    String?
  noticeId  String?
  note      Note?    @relation(fields: [noteId], references: [id])
  notice    Notice?  @relation(fields: [noticeId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [clerkId])
}

model UserAuth {
  id                 String    @id @default(cuid())
  clerkId            String    @unique
  googleAccessToken  String?
  googleRefreshToken String?
  googleTokenExpiry  DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

model RejectedNote {
  id              String   @id
  originalNoteId  String
  title           String
  authorClerkId   String
  authorName      String
  subjectId       String?
  subjectName     String?
  rejectedAt      DateTime
  deletedAt       DateTime @default(now())
  rejectionReason String?
  driveFileId     String?

  @@index([authorClerkId])
  @@index([rejectedAt])
  @@index([subjectId])
}

model UserProfile {
  id         String   @id @default(cuid())
  clerkId    String   @unique
  bio        String?
  studentId  String?  @unique
  department String?
  yearId     String?
  semesterId String?
  visibility Boolean  @default(true)
  profilePic String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [clerkId], references: [clerkId])
}

model Feedback {
  id            String   @id @default(cuid())
  content       String
  createdAt     DateTime @default(now())
  viewed        Boolean  @default(false)
  authorClerkId String?
  author        User?    @relation(fields: [authorClerkId], references: [clerkId])
}

model Notice {
  id          String    @id @default(cuid())
  title       String
  description String
  driveLink   String
  driveFileId String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  authorId    String
  isPublished Boolean   @default(true)
  comments    Comment[]
  likes       Like[]
  author      User      @relation(fields: [authorId], references: [clerkId])

  @@index([createdAt])
  @@index([isPublished])
}

enum NoteType {
  PPT
  LECTURE
  HANDWRITTEN
  PDF
}

enum UserRole {
  USER
  ADMIN
}
